// src/components/OrderDetailPage.jsx
"use client"

import { useEffect, useState, useContext } from "react"
import { useParams, useNavigate } from "react-router-dom"
import { AuthContext } from "../common/AuthContext" // Import AuthContext
import "../../styles/order-detail.css"

export default function OrderDetailPage() {
    // Destructure 'user' v√† 'loading' (tr·∫°ng th√°i loading t·ª´ AuthContext)
    const { user, loading: authLoading } = useContext(AuthContext) // ƒê·ªïi t√™n 'loading' th√†nh 'authLoading' ƒë·ªÉ d·ªÖ ph√¢n bi·ªát
    const { id } = useParams()
    const navigate = useNavigate()
    const [order, setOrder] = useState(null)
    const [shippingInfo, setShippingInfo] = useState(null)
    const [productNames, setProductNames] = useState({})
    const [pageLoading, setPageLoading] = useState(true) // Loading c·ª•c b·ªô cho trang n√†y (chi ti·∫øt ƒë∆°n h√†ng)
    const [error, setError] = useState("")

    // Fetch order detail
    useEffect(() => {
        // B∆∞·ªõc 1: Ch·ªù AuthContext ho√†n th√†nh vi·ªác t·∫£i tr·∫°ng th√°i x√°c th·ª±c
        if (authLoading) {
            setPageLoading(true); // Gi·ªØ loading c·ª•c b·ªô l√† true trong khi Auth ƒëang loading
            return; // D·ª´ng l·∫°i, ch∆∞a l√†m g√¨ n·∫øu Auth ƒëang x·ª≠ l√Ω
        }

        // B∆∞·ªõc 2: Sau khi AuthContext ƒë√£ t·∫£i xong, ki·ªÉm tra xem user c√≥ t·ªìn t·∫°i kh√¥ng
        if (!user || !user.id) {
            setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng.");
            setPageLoading(false); // ƒê·∫∑t loading c·ª•c b·ªô l√† false v√¨ kh√¥ng th·ªÉ fetch ƒë∆∞·ª£c
            // T√πy ch·ªçn: chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p n·∫øu mu·ªën
            // navigate("/login");
            return;
        }

        // N·∫øu user ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c, ti·∫øn h√†nh fetch chi ti·∫øt ƒë∆°n h√†ng
        setPageLoading(true); // B·∫Øt ƒë·∫ßu loading cho d·ªØ li·ªáu ƒë∆°n h√†ng
        fetch(`http://localhost:8080/orders/getDetailOrder/${id}`, {
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("TOKEN")}`,
            },
        })
            .then(async (res) => {
                if (!res.ok) {
                    const txt = await res.text();
                    // N·∫øu l·ªói do x√°c th·ª±c (v√≠ d·ª• 401 Unauthorized), x·ª≠ l√Ω ƒë·∫∑c bi·ªát
                    if (res.status === 401 || res.status === 403) {
                        // N√™n c√≥ h√†m logout t·ª´ AuthContext ho·∫∑c th√¥ng b√°o ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p l·∫°i
                        localStorage.removeItem("TOKEN"); // X√≥a token c≈©
                        // setError c√≥ th·ªÉ ƒë∆∞·ª£c set trong AuthContext n·∫øu n√≥ x·ª≠ l√Ω l·ªói
                        setError("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                        // throw new Error("Auth failed during order fetch."); // N√©m l·ªói ƒë·ªÉ d·ª´ng promise chain
                        return; // D·ª´ng x·ª≠ l√Ω ti·∫øp
                    }
                    throw new Error(txt || "Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt ƒë∆°n h√†ng.");
                }
                return res.json();
            })
            .then((body) => {
                setOrder(body.data);
            })
            .catch((err) => {
                console.error("L·ªói khi fetch chi ti·∫øt ƒë∆°n h√†ng:", err);
                // Ch·ªâ c·∫≠p nh·∫≠t l·ªói n·∫øu n√≥ ch∆∞a ƒë∆∞·ª£c set b·ªüi l·ªói x√°c th·ª±c tr∆∞·ªõc ƒë√≥
                if (!error.includes("Phi√™n ƒëƒÉng nh·∫≠p")) {
                    setError(err.message || "L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng.");
                }
            })
            .finally(() => {
                setPageLoading(false); // K·∫øt th√∫c loading cho d·ªØ li·ªáu ƒë∆°n h√†ng
            });
    }, [id, user, authLoading]); // Th√™m 'authLoading' v√†o dependency array

    // Fetch shipping info and product names
    useEffect(() => {
        if (!order) return; // Ch·ªâ ch·∫°y khi d·ªØ li·ªáu order ƒë√£ c√≥

        const token = localStorage.getItem("TOKEN");
        if (!token) {
            console.warn("Kh√¥ng c√≥ token ƒë·ªÉ l·∫•y th√¥ng tin li√™n quan ƒë·∫øn ƒë∆°n h√†ng.");
            return;
        }

        const headers = {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
        };

        // Fetch shipping address
        const fetchShippingAddress = async () => {
            try {
                const res = await fetch(`http://localhost:8080/shippingAddress/getShippingAddressById?id=${order.shippingAddressId}`, { headers });
                if (!res.ok) {
                    const txt = await res.text();
                    throw new Error(txt || "Kh√¥ng l·∫•y ƒë∆∞·ª£c ƒë·ªãa ch·ªâ giao h√†ng.");
                }
                const body = await res.json();
                setShippingInfo(body.data);
            } catch (err) {
                console.error("L·ªói khi fetch ƒë·ªãa ch·ªâ giao h√†ng:", err);
                setError((prev) => (prev ? prev + "\n" : "") + (err.message || "L·ªói l·∫•y ƒë·ªãa ch·ªâ."));
            }
        };

        // Fetch product names
        const fetchProductNames = async () => {
            const details = order.details || [];
            const namesMap = {};
            await Promise.all(
                details.map(async (item) => {
                    try {
                        const res = await fetch(`http://localhost:8080/storage/getProductBySkuCode/${encodeURIComponent(item.skuCode)}`, { headers });
                        if (!res.ok) {
                            const txt = await res.text();
                            throw new Error(`Kh√¥ng l·∫•y ƒë∆∞·ª£c s·∫£n ph·∫©m cho SKU ${item.skuCode}: ${txt}`);
                        }
                        const body = await res.json();
                        const product = body.data;
                        namesMap[item.skuCode] = product.productName;
                    } catch (err) {
                        console.error(`L·ªói khi fetch s·∫£n ph·∫©m cho SKU ${item.skuCode}:`, err);
                        namesMap[item.skuCode] = "(Kh√¥ng x√°c ƒë·ªãnh)"; // G√°n t√™n t·∫°m th·ªùi n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c
                    }
                }),
            );
            setProductNames(namesMap);
        };

        fetchShippingAddress();
        fetchProductNames();

    }, [order]); // Ph·ª• thu·ªôc v√†o order

    const handleBack = () => {
        navigate("/"); // S·ª≠ d·ª•ng navigate ƒë·ªÉ chuy·ªÉn trang m√† kh√¥ng t·∫£i l·∫°i to√†n b·ªô trang
    };

    // Hi·ªÉn th·ªã tr·∫°ng th√°i loading ri√™ng cho qu√° tr√¨nh x√°c th·ª±c tr∆∞·ªõc ti√™n
    if (authLoading) {
        return (
            <div className="order-detail-container">
                <div className="loading-spinner">
                    <div className="spinner"></div>
                    <p>ƒêang ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p...</p>
                </div>
            </div>
        );
    }

    // Sau ƒë√≥, hi·ªÉn th·ªã loading/error cho chi ti·∫øt ƒë∆°n h√†ng
    if (pageLoading) {
        return (
            <div className="order-detail-container">
                <div className="loading-spinner">
                    <div className="spinner"></div>
                    <p>ƒêang t·∫£i chi ti·∫øt ƒë∆°n h√†ng...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="order-detail-container">
                <div className="error-container">
                    <div className="error-icon">‚ö†Ô∏è</div>
                    <p className="error-text">L·ªói: {error}</p>
                    <button className="back-button" onClick={handleBack}>
                        ‚Üê Quay l·∫°i
                    </button>
                </div>
            </div>
        );
    }

    if (!order) {
        return (
            <div className="order-detail-container">
                <div className="error-container">
                    <div className="error-icon">üì¶</div>
                    <p>Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng.</p>
                    <button className="back-button" onClick={handleBack}>
                        ‚Üê Quay l·∫°i
                    </button>
                </div>
            </div>
        );
    }

    const { details, totalPrice } = order;

    return (
        <div className="order-detail-container">
            <div className="header-section">
                <button className="back-button" onClick={handleBack}>
                    ‚Üê Ti·∫øp t·ª•c mua s·∫Øm
                </button>
                <h1 className="page-title">Chi Ti·∫øt ƒê∆°n H√†ng</h1>
                <div className="order-id">M√£ ƒë∆°n h√†ng: #{id}</div>
            </div>

            <div className="content-wrapper">
                {/* Shipping Information */}
                {shippingInfo ? (
                    <div className="info-card shipping-card">
                        <div className="card-header">
                            <div className="card-icon shipping-icon">üöö</div>
                            <h2 className="card-title">Th√¥ng Tin ƒê·ªãa Ch·ªâ Giao H√†ng</h2>
                        </div>
                        <div className="card-content">
                            <div className="info-row">
                                <span className="info-label">Ng∆∞·ªùi nh·∫≠n:</span>
                                <span className="info-value">{shippingInfo.consigneeName}</span>
                            </div>
                            <div className="info-row">
                                <span className="info-label">ƒêi·ªán tho·∫°i:</span>
                                <span className="info-value">{shippingInfo.mobile}</span>
                            </div>
                            <div className="info-row">
                                <span className="info-label">ƒê·ªãa ch·ªâ:</span>
                                <span className="info-value">{shippingInfo.address}</span>
                            </div>
                        </div>
                    </div>
                ) : (
                    <div className="info-card">
                        <div className="loading-text">ƒêang t·∫£i ƒë·ªãa ch·ªâ giao h√†ng...</div>
                    </div>
                )}

                {/* Products */}
                <div className="info-card products-card">
                    <div className="card-header">
                        <div className="card-icon products-icon">üì¶</div>
                        <h2 className="card-title">S·∫£n Ph·∫©m</h2>
                    </div>
                    <div className="card-content">
                        <div className="products-table">
                            <div className="table-header">
                                <div className="table-cell header-cell">T√™n s·∫£n ph·∫©m</div>
                                <div className="table-cell header-cell">M√£ SKU</div>
                                <div className="table-cell header-cell">S·ªë l∆∞·ª£ng</div>
                            </div>
                            {details.map((item, idx) => {
                                const name = productNames[item.skuCode] || "ƒêang t·∫£i...";
                                return (
                                    <div key={idx} className="table-row">
                                        <div className="table-cell product-name">{name}</div>
                                        <div className="table-cell sku-code">{item.skuCode}</div>
                                        <div className="table-cell quantity">
                                            <span className="quantity-badge">{item.quantity}</span>
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    </div>
                </div>

                {/* Order Summary */}
                <div className="info-card summary-card">
                    <div className="card-header">
                        <div className="card-icon summary-icon">üí∞</div>
                        <h2 className="card-title">T·ªïng Ti·ªÅn</h2>
                    </div>
                    <div className="card-content">
                        <div className="summary-row">
                            <span className="summary-label">T·ªïng s·ªë s·∫£n ph·∫©m:</span>
                            <span className="summary-value">{details.reduce((sum, item) => sum + item.quantity, 0)} m√≥n</span>
                        </div>
                        <div className="summary-divider"></div>
                        <div className="total-row">
                            <span className="total-label">T·ªïng ti·ªÅn thanh to√°n:</span>
                            <span className="total-price">{Number(totalPrice).toLocaleString()} ‚Ç´</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}